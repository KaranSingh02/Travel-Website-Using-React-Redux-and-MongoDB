{"ast":null,"code":"import { app } from \"./app.js\";\nimport { items } from \"./mongodb\";\nimport { UserPasswordAuthProviderClient, UserPasswordCredential } from \"mongodb-stitch-browser-sdk\"; // const { UserPasswordAuthProviderClient } = Stitch;\n\nconst emailPasswordClient = app.auth.getProviderClient(UserPasswordAuthProviderClient.factory);\nexport async function registerUser(email, password) {\n  //allow users to log in with email and password\n  await emailPasswordClient.registerWithEmail(email, password).then(() => window.location.href = '/login').catch(err => alert(\"Error registering new user:\", err));\n}\nexport async function loginUser(email, password) {\n  const credential = new UserPasswordCredential(email, password);\n  var curruser = getCurrentUser();\n  var ispresent = result.some(item => item.owner_id === curruser.id);\n  await app.auth.loginWithCredential(credential) // Returns a promise that resolves to the authenticated user\n  .then(ispresent => {\n    if (ispresent) {\n      window.location.href = '/profile';\n    } else {\n      window.location.href = '/';\n    }\n  }).catch(err => alert(`login failed with error: ${err}`));\n}\nexport function hasLoggedInUser() {\n  // Check if there is currently a logged in user  \n  console.log('from has logged in auth :-' + app.auth.isLoggedIn);\n  return app.auth.isLoggedIn;\n}\nexport function getCurrentUser() {\n  // Return the user object of the currently logged in user\n  return app.auth.isLoggedIn ? app.auth.user : null;\n}\nexport async function logoutCurrentUser() {\n  // Logout the currently logged in user\n  const user = getCurrentUser();\n  await app.auth.logoutUserWithId(user.id).then(() => window.location.href = '/register');\n}\nexport async function dealerDetails() {\n  var details = await items.find({}).toArray();\n  return details;\n}","map":{"version":3,"sources":["E:/React/My-Website-EVS/src/Stitch/authentication.js"],"names":["app","items","UserPasswordAuthProviderClient","UserPasswordCredential","emailPasswordClient","auth","getProviderClient","factory","registerUser","email","password","registerWithEmail","then","window","location","href","catch","err","alert","loginUser","credential","curruser","getCurrentUser","ispresent","result","some","item","owner_id","id","loginWithCredential","hasLoggedInUser","console","log","isLoggedIn","user","logoutCurrentUser","logoutUserWithId","dealerDetails","details","find","toArray"],"mappings":"AAAA,SAASA,GAAT,QAAoB,UAApB;AACA,SAASC,KAAT,QAAsB,WAAtB;AACC,SAASC,8BAAT,EAAwCC,sBAAxC,QAAsE,4BAAtE,C,CACD;;AAEA,MAAMC,mBAAmB,GAAGJ,GAAG,CAACK,IAAJ,CACvBC,iBADuB,CACLJ,8BAA8B,CAACK,OAD1B,CAA5B;AAIA,OAAO,eAAeC,YAAf,CAA4BC,KAA5B,EAAkCC,QAAlC,EAA4C;AAC/C;AACA,QAAMN,mBAAmB,CAACO,iBAApB,CAAsCF,KAAtC,EAA6CC,QAA7C,EACDE,IADC,CACI,MAAOC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QADlC,EAEDC,KAFC,CAEKC,GAAG,IAAIC,KAAK,CAAC,6BAAD,EAAgCD,GAAhC,CAFjB,CAAN;AAGH;AAED,OAAO,eAAeE,SAAf,CAAyBV,KAAzB,EAA+BC,QAA/B,EAAyC;AAC5C,QAAMU,UAAU,GAAG,IAAIjB,sBAAJ,CAA2BM,KAA3B,EAAiCC,QAAjC,CAAnB;AACA,MAAIW,QAAQ,GAAGC,cAAc,EAA7B;AACA,MAAIC,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYC,IAAI,IAAIA,IAAI,CAACC,QAAL,KAAkBN,QAAQ,CAACO,EAA/C,CAAhB;AACA,QAAM5B,GAAG,CAACK,IAAJ,CAASwB,mBAAT,CAA6BT,UAA7B,EACN;AADM,GAELR,IAFK,CAECW,SAAD,IACL;AACI,QAAGA,SAAH,EAAa;AACVV,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,UAAvB;AACF,KAFD,MAGI;AACDF,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAvB;AACH;AACJ,GAVK,EAWLC,KAXK,CAWCC,GAAG,IAAIC,KAAK,CAAE,4BAA2BD,GAAI,EAAjC,CAXb,CAAN;AAYH;AAED,OAAO,SAASa,eAAT,GAA2B;AAChC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,+BAA6BhC,GAAG,CAACK,IAAJ,CAAS4B,UAAlD;AACA,SAAOjC,GAAG,CAACK,IAAJ,CAAS4B,UAAhB;AACD;AAED,OAAO,SAASX,cAAT,GAA0B;AAC7B;AACA,SAAOtB,GAAG,CAACK,IAAJ,CAAS4B,UAAT,GAAsBjC,GAAG,CAACK,IAAJ,CAAS6B,IAA/B,GAAsC,IAA7C;AACH;AAED,OAAO,eAAeC,iBAAf,GAAmC;AACtC;AAEA,QAAMD,IAAI,GAAGZ,cAAc,EAA3B;AACA,QAAMtB,GAAG,CAACK,IAAJ,CAAS+B,gBAAT,CAA0BF,IAAI,CAACN,EAA/B,EAAmChB,IAAnC,CACF,MAAMC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,WAD3B,CAAN;AAGH;AAED,OAAO,eAAesB,aAAf,GAA+B;AAClC,MAAIC,OAAO,GAAG,MAAMrC,KAAK,CAACsC,IAAN,CAAW,EAAX,EAAeC,OAAf,EAApB;AACA,SAAOF,OAAP;AACH","sourcesContent":["import { app } from \"./app.js\";\r\nimport { items } from \"./mongodb\";\r\n import { UserPasswordAuthProviderClient,UserPasswordCredential } from \"mongodb-stitch-browser-sdk\";\r\n// const { UserPasswordAuthProviderClient } = Stitch;\r\n\r\nconst emailPasswordClient = app.auth\r\n    .getProviderClient(UserPasswordAuthProviderClient.factory);\r\n\r\n\r\nexport async function registerUser(email,password) {\r\n    //allow users to log in with email and password\r\n    await emailPasswordClient.registerWithEmail(email, password)\r\n        .then(() =>  window.location.href = '/login')\r\n        .catch(err => alert(\"Error registering new user:\", err));\r\n}\r\n\r\nexport async function loginUser(email,password) {\r\n    const credential = new UserPasswordCredential(email,password);\r\n    var curruser = getCurrentUser();\r\n    var ispresent = result.some(item => item.owner_id === curruser.id);\r\n    await app.auth.loginWithCredential(credential)    \r\n    // Returns a promise that resolves to the authenticated user\r\n    .then((ispresent) => \r\n     {\r\n         if(ispresent){\r\n            window.location.href = '/profile'\r\n         }\r\n         else{\r\n            window.location.href = '/'\r\n        }\r\n    })\r\n    .catch(err => alert(`login failed with error: ${err}`));\r\n}\r\n\r\nexport function hasLoggedInUser() {\r\n  // Check if there is currently a logged in user  \r\n  console.log('from has logged in auth :-'+app.auth.isLoggedIn)\r\n  return app.auth.isLoggedIn;\r\n}\r\n\r\nexport function getCurrentUser() {\r\n    // Return the user object of the currently logged in user\r\n    return app.auth.isLoggedIn ? app.auth.user : null;\r\n}\r\n\r\nexport async function logoutCurrentUser() {\r\n    // Logout the currently logged in user\r\n    \r\n    const user = getCurrentUser();\r\n    await app.auth.logoutUserWithId(user.id).then(\r\n        () => window.location.href = '/register'\r\n    );\r\n}\r\n\r\nexport async function dealerDetails() {\r\n    var details = await items.find({}).toArray();\r\n    return details;\r\n}"]},"metadata":{},"sourceType":"module"}