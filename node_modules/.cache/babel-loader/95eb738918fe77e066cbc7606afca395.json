{"ast":null,"code":"import { items, ticketDetails } from \"./../../Stitch/mongodb\";\nimport { loginUser, registerUser, hasLoggedInUser, logoutCurrentUser, getCurrentUser } from \"./../../Stitch/authentication\";\n\nconst userDetails = async () => {\n  var users = await items.find({}).toArray();\n  return users;\n};\n\nconst tickets = async () => {\n  var ticket = await ticketDetails.find({}).toArray();\n  return ticket;\n};\n\nconst myState = {\n  check: hasLoggedInUser(),\n  currentuser: getCurrentUser(),\n  dealer: false,\n  customer: false,\n  userDetails: userDetails(),\n  ticketDetails: tickets()\n};\nexport const userReducer = (state = myState, action) => {\n  switch (action.type) {\n    case 'CHANGE_STATE':\n      myState = {\n        check: hasLoggedInUser(),\n        currentuser: getCurrentUser(),\n        dealer: false,\n        customer: false,\n        userDetails: action.users,\n        ticketDetails: action.tickets\n      };\n      return myState;\n\n    case 'REGISTER_USER':\n      state.dealer = action.dealer;\n      state.customer = action.customer;\n      registerUser(action.email, action.password);\n      return state;\n\n    case 'LOGIN_USER':\n      myState.check = action.isLogIn;\n      loginUser(action.email, action.password);\n      return state;\n\n    case 'UPDATE_PROFILE':\n      //quering the user whose profile is to be updated.\n      const query = {\n        \"owner_id\": myState.currentuser.id\n      }; //upsert when true add a new doc if the above query runs false\n\n      const options = {\n        \"upsert\": true\n      }; //the data to be updated or added\n\n      const new_user = {\n        \"owner_id\": myState.currentuser.id,\n        \"name\": action.user_name,\n        \"email\": action.user_email,\n        \"age\": action.user_age,\n        \"bio\": action.user_bio,\n        \"isAdmin\": action.user_admin,\n        \"isDealer\": action.user_dealer,\n        \"isCustomer\": action.user_customer\n      }; // if(action.user_dealer){\n      //     dealerDetails.updateOne(query, new_user, options).then(() => alert(\"User Profile Updated\"));\n      // }\n      // else{\n      //     customerDetails.updateOne(query, new_user, options).then(() => alert(\"User Profile Updated\"));\n      // }\n\n      items.updateOne(query, new_user, options).then(() => alert(\"User Profile Updated\")); //items.insertOne(new_user).then(() => alert(\"User Profile Updated\"));\n\n      return myState;\n\n    case 'LOGOUT_USER':\n      //updating the state\n      state.check = false;\n      state.dealer = false;\n      state.customer = false;\n      logoutCurrentUser();\n      return state;\n\n    case 'RAISE_TICKET':\n      const new_ticket = {\n        \"Customer_name\": action.user_cus_name,\n        \"customer_id\": action.user_cus_id,\n        \"start\": action.user_start,\n        \"destiny\": action.user_destiny,\n        \"startdate\": action.user_startdate,\n        \"returndate\": action.user_returndate,\n        \"quantity\": action.user_quantity\n      }; //alert(\"HEllo\");\n\n      ticketDetails.insertOne(new_ticket).then(() => window.location.href = '/buy_tickets');\n      return myState;\n\n    default:\n      //returning previous state\n      return myState;\n  }\n};","map":{"version":3,"sources":["/home/karan/Documents/My-Website-EVS/src/Redux/Reducers/addReducer.js"],"names":["items","ticketDetails","loginUser","registerUser","hasLoggedInUser","logoutCurrentUser","getCurrentUser","userDetails","users","find","toArray","tickets","ticket","myState","check","currentuser","dealer","customer","userReducer","state","action","type","email","password","isLogIn","query","id","options","new_user","user_name","user_email","user_age","user_bio","user_admin","user_dealer","user_customer","updateOne","then","alert","new_ticket","user_cus_name","user_cus_id","user_start","user_destiny","user_startdate","user_returndate","user_quantity","insertOne","window","location","href"],"mappings":"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","sourcesContent":["import {items,ticketDetails} from \"./../../Stitch/mongodb\";\r\nimport {\r\n   loginUser,\r\n   registerUser,\r\n   hasLoggedInUser,\r\n   logoutCurrentUser,\r\n   getCurrentUser\r\n} from \"./../../Stitch/authentication\";\r\n\r\nconst userDetails = async () => {\r\n    var users = await items.find({}).toArray();\r\n    return users;\r\n}\r\n\r\nconst tickets = async () => {\r\n    var ticket = await ticketDetails.find({}).toArray();\r\n    return ticket;\r\n}\r\n\r\nconst myState = {\r\n    check: hasLoggedInUser(),\r\n    currentuser: getCurrentUser(),\r\n    dealer: false,\r\n    customer: false,\r\n    userDetails: userDetails(),\r\n    ticketDetails: tickets()\r\n}\r\n\r\nexport const userReducer =  (state = myState, action) => {\r\n    switch (action.type) {\r\n\r\n        case 'CHANGE_STATE':\r\n            myState = {\r\n                check: hasLoggedInUser(),\r\n                currentuser: getCurrentUser(),\r\n                dealer: false,\r\n                customer: false,\r\n                userDetails: action.users,\r\n                ticketDetails: action.tickets\r\n            }\r\n\r\n            return myState;\r\n\r\n        case 'REGISTER_USER':\r\n            state.dealer = action.dealer;\r\n            state.customer = action.customer;\r\n\r\n            registerUser(action.email, action.password);  \r\n            return state;\r\n        \r\n        case 'LOGIN_USER':\r\n            myState.check = action.isLogIn;        \r\n            loginUser(action.email,action.password);          \r\n            return state;\r\n\r\n        case 'UPDATE_PROFILE':\r\n            //quering the user whose profile is to be updated.\r\n            const query = { \"owner_id\": myState.currentuser.id };\r\n            //upsert when true add a new doc if the above query runs false\r\n            const options = {\"upsert\": true};\r\n            //the data to be updated or added\r\n            const new_user = {\r\n                \"owner_id\": myState.currentuser.id,\r\n                \"name\": action.user_name,\r\n                \"email\": action.user_email,\r\n                \"age\": action.user_age,\r\n                \"bio\": action.user_bio,\r\n                \"isAdmin\": action.user_admin,\r\n                \"isDealer\": action.user_dealer,\r\n                \"isCustomer\": action.user_customer\r\n            }\r\n            // if(action.user_dealer){\r\n            //     dealerDetails.updateOne(query, new_user, options).then(() => alert(\"User Profile Updated\"));\r\n            // }\r\n            // else{\r\n            //     customerDetails.updateOne(query, new_user, options).then(() => alert(\"User Profile Updated\"));\r\n            // }\r\n            items.updateOne(query, new_user, options).then(() => alert(\"User Profile Updated\"));\r\n            //items.insertOne(new_user).then(() => alert(\"User Profile Updated\"));\r\n            return myState;\r\n\r\n        case 'LOGOUT_USER':\r\n            //updating the state\r\n            state.check = false;\r\n            state.dealer = false;\r\n            state.customer = false;\r\n            logoutCurrentUser();\r\n            return state;\r\n\r\n        case 'RAISE_TICKET':\r\n            const new_ticket = {\r\n                \"Customer_name\": action.user_cus_name,\r\n                \"customer_id\": action.user_cus_id,\r\n                \"start\": action.user_start,\r\n                \"destiny\": action.user_destiny,\r\n                \"startdate\": action.user_startdate,\r\n                \"returndate\": action.user_returndate,\r\n                \"quantity\": action.user_quantity\r\n            }\r\n            //alert(\"HEllo\");\r\n            ticketDetails.insertOne(new_ticket).then(() => window.location.href = '/buy_tickets');\r\n            \r\n            return myState;\r\n\r\n        default:\r\n            //returning previous state\r\n            return myState;\r\n    }   \r\n}"]},"metadata":{},"sourceType":"module"}