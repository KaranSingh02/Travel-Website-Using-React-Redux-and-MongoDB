{"ast":null,"code":"import { items } from \"./../../Stitch/mongodb\";\nimport { loginUser, registerUser, hasLoggedInUser, logoutCurrentUser, getCurrentUser } from \"./../../Stitch/authentication\";\nconst myState = {\n  check: hasLoggedInUser(),\n  currentuser: getCurrentUser(),\n  dealer: false,\n  customer: false\n};\nexport const userReducer = (state = myState, action) => {\n  switch (action.type) {\n    case 'REGISTER_USER':\n      //state.dealer = action.dealer;\n      //state.customer = action.customer;\n      registerUser(action.email, action.password, action.dealer);\n      return [{\n        dealer: action.dealer\n      }];\n\n    case 'LOGIN_USER':\n      myState.check = action.isLogIn;\n      loginUser(action.email, action.password);\n      return state;\n\n    case 'UPDATE_PROFILE':\n      //quering the user whose profile is to be updated.\n      const query = {\n        \"owner_id\": myState.currentuser.id\n      }; //upsert when true add a new doc if the above query runs false\n\n      const options = {\n        \"upsert\": true\n      }; //the data to be updated or added\n\n      const new_user = {\n        \"owner_id\": myState.currentuser.id,\n        \"name\": action.user_name,\n        \"email\": action.user_email,\n        \"age\": action.user_age,\n        \"bio\": action.user_bio,\n        \"isAdmin\": action.user_admin,\n        \"isDealer\": action.user_dealer,\n        \"isCustomer\": action.user_customer\n      }; // if(action.user_dealer){\n      //     dealerDetails.updateOne(query, new_user, options).then(() => alert(\"User Profile Updated\"));\n      // }\n      // else{\n      //     customerDetails.updateOne(query, new_user, options).then(() => alert(\"User Profile Updated\"));\n      // }\n\n      items.updateOne(query, new_user, options).then(() => alert(\"User Profile Updated\")); //items.insertOne(new_user).then(() => alert(\"User Profile Updated\"));\n\n      return myState;\n\n    case 'LOGOUT_USER':\n      //updating the state\n      state.check = false;\n      state.dealer = false;\n      state.customer = false;\n      logoutCurrentUser();\n      return state;\n\n    default:\n      //returning previous state\n      return myState;\n  }\n};","map":{"version":3,"sources":["E:/React/My-Website-EVS/src/Redux/Reducers/addReducer.js"],"names":["items","loginUser","registerUser","hasLoggedInUser","logoutCurrentUser","getCurrentUser","myState","check","currentuser","dealer","customer","userReducer","state","action","type","email","password","isLogIn","query","id","options","new_user","user_name","user_email","user_age","user_bio","user_admin","user_dealer","user_customer","updateOne","then","alert"],"mappings":"AAAA,SAAQA,KAAR,QAAoB,wBAApB;AACA,SACGC,SADH,EAEGC,YAFH,EAGGC,eAHH,EAIGC,iBAJH,EAKIC,cALJ,QAMO,+BANP;AAUA,MAAMC,OAAO,GAAG;AACZC,EAAAA,KAAK,EAAEJ,eAAe,EADV;AAEZK,EAAAA,WAAW,EAAEH,cAAc,EAFf;AAGZI,EAAAA,MAAM,EAAE,KAHI;AAIZC,EAAAA,QAAQ,EAAE;AAJE,CAAhB;AAOA,OAAO,MAAMC,WAAW,GAAI,CAACC,KAAK,GAAGN,OAAT,EAAkBO,MAAlB,KAA6B;AACrD,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAK,eAAL;AACI;AACA;AAEAZ,MAAAA,YAAY,CAACW,MAAM,CAACE,KAAR,EAAeF,MAAM,CAACG,QAAtB,EAA+BH,MAAM,CAACJ,MAAtC,CAAZ;AACA,aAAO,CAAC;AAACA,QAAAA,MAAM,EAAEI,MAAM,CAACJ;AAAhB,OAAD,CAAP;;AAEJ,SAAK,YAAL;AACIH,MAAAA,OAAO,CAACC,KAAR,GAAgBM,MAAM,CAACI,OAAvB;AACAhB,MAAAA,SAAS,CAACY,MAAM,CAACE,KAAR,EAAcF,MAAM,CAACG,QAArB,CAAT;AACA,aAAOJ,KAAP;;AAEJ,SAAK,gBAAL;AACI;AACA,YAAMM,KAAK,GAAG;AAAE,oBAAYZ,OAAO,CAACE,WAAR,CAAoBW;AAAlC,OAAd,CAFJ,CAGI;;AACA,YAAMC,OAAO,GAAG;AAAC,kBAAU;AAAX,OAAhB,CAJJ,CAKI;;AACA,YAAMC,QAAQ,GAAG;AACb,oBAAYf,OAAO,CAACE,WAAR,CAAoBW,EADnB;AAEb,gBAAQN,MAAM,CAACS,SAFF;AAGb,iBAAST,MAAM,CAACU,UAHH;AAIb,eAAOV,MAAM,CAACW,QAJD;AAKb,eAAOX,MAAM,CAACY,QALD;AAMb,mBAAWZ,MAAM,CAACa,UANL;AAOb,oBAAYb,MAAM,CAACc,WAPN;AAQb,sBAAcd,MAAM,CAACe;AARR,OAAjB,CANJ,CAgBI;AACA;AACA;AACA;AACA;AACA;;AACA5B,MAAAA,KAAK,CAAC6B,SAAN,CAAgBX,KAAhB,EAAuBG,QAAvB,EAAiCD,OAAjC,EAA0CU,IAA1C,CAA+C,MAAMC,KAAK,CAAC,sBAAD,CAA1D,EAtBJ,CAuBI;;AACA,aAAOzB,OAAP;;AAEJ,SAAK,aAAL;AACI;AACAM,MAAAA,KAAK,CAACL,KAAN,GAAc,KAAd;AACAK,MAAAA,KAAK,CAACH,MAAN,GAAe,KAAf;AACAG,MAAAA,KAAK,CAACF,QAAN,GAAiB,KAAjB;AACAN,MAAAA,iBAAiB;AACjB,aAAOQ,KAAP;;AAGJ;AACI;AACA,aAAON,OAAP;AAnDR;AAqDH,CAtDM","sourcesContent":["import {items} from \"./../../Stitch/mongodb\";\r\nimport {\r\n   loginUser,\r\n   registerUser,\r\n   hasLoggedInUser,\r\n   logoutCurrentUser,\r\n    getCurrentUser\r\n} from \"./../../Stitch/authentication\";\r\n\r\n\r\n\r\nconst myState = {\r\n    check: hasLoggedInUser(),\r\n    currentuser: getCurrentUser(),\r\n    dealer: false,\r\n    customer: false\r\n}\r\n\r\nexport const userReducer =  (state = myState, action) => {\r\n    switch (action.type) {\r\n\r\n        case 'REGISTER_USER':\r\n            //state.dealer = action.dealer;\r\n            //state.customer = action.customer;\r\n\r\n            registerUser(action.email, action.password,action.dealer);  \r\n            return [{dealer: action.dealer}];\r\n        \r\n        case 'LOGIN_USER':\r\n            myState.check = action.isLogIn;        \r\n            loginUser(action.email,action.password);          \r\n            return state;\r\n\r\n        case 'UPDATE_PROFILE':\r\n            //quering the user whose profile is to be updated.\r\n            const query = { \"owner_id\": myState.currentuser.id };\r\n            //upsert when true add a new doc if the above query runs false\r\n            const options = {\"upsert\": true};\r\n            //the data to be updated or added\r\n            const new_user = {\r\n                \"owner_id\": myState.currentuser.id,\r\n                \"name\": action.user_name,\r\n                \"email\": action.user_email,\r\n                \"age\": action.user_age,\r\n                \"bio\": action.user_bio,\r\n                \"isAdmin\": action.user_admin,\r\n                \"isDealer\": action.user_dealer,\r\n                \"isCustomer\": action.user_customer\r\n            }\r\n            // if(action.user_dealer){\r\n            //     dealerDetails.updateOne(query, new_user, options).then(() => alert(\"User Profile Updated\"));\r\n            // }\r\n            // else{\r\n            //     customerDetails.updateOne(query, new_user, options).then(() => alert(\"User Profile Updated\"));\r\n            // }\r\n            items.updateOne(query, new_user, options).then(() => alert(\"User Profile Updated\"));\r\n            //items.insertOne(new_user).then(() => alert(\"User Profile Updated\"));\r\n            return myState;\r\n\r\n        case 'LOGOUT_USER':\r\n            //updating the state\r\n            state.check = false;\r\n            state.dealer = false;\r\n            state.customer = false;\r\n            logoutCurrentUser();\r\n            return state;\r\n            \r\n       \r\n        default:\r\n            //returning previous state\r\n            return myState;\r\n    }   \r\n}"]},"metadata":{},"sourceType":"module"}