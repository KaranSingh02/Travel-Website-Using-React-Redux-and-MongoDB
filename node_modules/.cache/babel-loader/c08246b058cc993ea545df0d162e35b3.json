{"ast":null,"code":"import { items } from \"./../../Stitch/mongodb\";\nimport { loginUser, registerUser, hasLoggedInUser, logoutCurrentUser, getCurrentUser } from \"./../../Stitch/authentication\";\n\nconst getData = async () => {\n  var curruser = this.props.isLogIn.userReducer.currentuser; //getting data from db\n\n  var details = await items.find({\n    \"owner_id\": curruser.id\n  }).toArray();\n  return details;\n};\n\nconst myState = {\n  check: hasLoggedInUser(),\n  currentuser: getCurrentUser(),\n  userData: getData()\n};\nexport const userReducer = (state = myState, action) => {\n  switch (action.type) {\n    case 'REGISTER_USER':\n      registerUser(action.email, action.password);\n      return state;\n\n    case 'LOGIN_USER':\n      myState.check = action.isLogIn;\n      loginUser(action.email, action.password);\n      return myState;\n\n    case 'UPDATE_PROFILE':\n      //quering the user whose profile is to be updated.\n      const query = {\n        \"owner_id\": myState.currentuser.id\n      }; //upsert when true add a new doc if the above query runs false\n\n      const options = {\n        \"upsert\": true\n      }; //the data to be updated or added\n\n      const new_user = {\n        \"owner_id\": myState.currentuser.id,\n        \"name\": action.user_name,\n        \"email\": action.user_email,\n        \"age\": action.user_age,\n        \"bio\": action.user_bio\n      };\n      items.updateOne(query, new_user, options).then(() => alert(\"User Profile Updated\")); //items.insertOne(new_user).then(() => alert(\"User Profile Updated\"));\n\n      return myState;\n\n    case 'LOGOUT_USER':\n      //updating the state\n      myState.check = false;\n      logoutCurrentUser();\n      return myState;\n\n    default:\n      //returning previous state\n      return state;\n  }\n};","map":{"version":3,"sources":["E:/React/My-Website-EVS/src/Redux/Reducers/addReducer.js"],"names":["items","loginUser","registerUser","hasLoggedInUser","logoutCurrentUser","getCurrentUser","getData","curruser","props","isLogIn","userReducer","currentuser","details","find","id","toArray","myState","check","userData","state","action","type","email","password","query","options","new_user","user_name","user_email","user_age","user_bio","updateOne","then","alert"],"mappings":"AAAA,SAAQA,KAAR,QAAoB,wBAApB;AACA,SACGC,SADH,EAEGC,YAFH,EAGGC,eAHH,EAIGC,iBAJH,EAKGC,cALH,QAMO,+BANP;;AAQA,MAAMC,OAAO,GAAG,YAAY;AACxB,MAAIC,QAAQ,GAAG,KAAKC,KAAL,CAAWC,OAAX,CAAmBC,WAAnB,CAA+BC,WAA9C,CADwB,CAExB;;AACA,MAAIC,OAAO,GAAG,MAAMZ,KAAK,CAACa,IAAN,CAAW;AAAE,gBAAYN,QAAQ,CAACO;AAAvB,GAAX,EAAwCC,OAAxC,EAApB;AACA,SAAOH,OAAP;AACH,CALD;;AAOA,MAAMI,OAAO,GAAG;AACZC,EAAAA,KAAK,EAAEd,eAAe,EADV;AAEZQ,EAAAA,WAAW,EAAEN,cAAc,EAFf;AAGZa,EAAAA,QAAQ,EAAEZ,OAAO;AAHL,CAAhB;AAMA,OAAO,MAAMI,WAAW,GAAI,CAACS,KAAK,GAAGH,OAAT,EAAkBI,MAAlB,KAA6B;AACrD,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAK,eAAL;AACInB,MAAAA,YAAY,CAACkB,MAAM,CAACE,KAAR,EAAeF,MAAM,CAACG,QAAtB,CAAZ;AACA,aAAOJ,KAAP;;AAEJ,SAAK,YAAL;AACIH,MAAAA,OAAO,CAACC,KAAR,GAAgBG,MAAM,CAACX,OAAvB;AACAR,MAAAA,SAAS,CAACmB,MAAM,CAACE,KAAR,EAAcF,MAAM,CAACG,QAArB,CAAT;AACA,aAAOP,OAAP;;AAEJ,SAAK,gBAAL;AACI;AACA,YAAMQ,KAAK,GAAG;AAAE,oBAAYR,OAAO,CAACL,WAAR,CAAoBG;AAAlC,OAAd,CAFJ,CAGI;;AACA,YAAMW,OAAO,GAAG;AAAC,kBAAU;AAAX,OAAhB,CAJJ,CAKI;;AACA,YAAMC,QAAQ,GAAG;AACb,oBAAYV,OAAO,CAACL,WAAR,CAAoBG,EADnB;AAEb,gBAAQM,MAAM,CAACO,SAFF;AAGb,iBAASP,MAAM,CAACQ,UAHH;AAIb,eAAOR,MAAM,CAACS,QAJD;AAKb,eAAOT,MAAM,CAACU;AALD,OAAjB;AAOA9B,MAAAA,KAAK,CAAC+B,SAAN,CAAgBP,KAAhB,EAAuBE,QAAvB,EAAiCD,OAAjC,EAA0CO,IAA1C,CAA+C,MAAMC,KAAK,CAAC,sBAAD,CAA1D,EAbJ,CAcI;;AACA,aAAOjB,OAAP;;AAEJ,SAAK,aAAL;AACI;AACAA,MAAAA,OAAO,CAACC,KAAR,GAAgB,KAAhB;AACAb,MAAAA,iBAAiB;AACjB,aAAOY,OAAP;;AAGJ;AACI;AACA,aAAOG,KAAP;AArCR;AAuCH,CAxCM","sourcesContent":["import {items} from \"./../../Stitch/mongodb\";\r\nimport {\r\n   loginUser,\r\n   registerUser,\r\n   hasLoggedInUser,\r\n   logoutCurrentUser,\r\n   getCurrentUser\r\n} from \"./../../Stitch/authentication\";\r\n\r\nconst getData = async () => {\r\n    var curruser = this.props.isLogIn.userReducer.currentuser;\r\n    //getting data from db\r\n    var details = await items.find({ \"owner_id\": curruser.id }).toArray();\r\n    return details;\r\n}\r\n\r\nconst myState = {\r\n    check: hasLoggedInUser(),\r\n    currentuser: getCurrentUser(),\r\n    userData: getData()\r\n}\r\n\r\nexport const userReducer =  (state = myState, action) => {\r\n    switch (action.type) {\r\n\r\n        case 'REGISTER_USER':\r\n            registerUser(action.email, action.password);  \r\n            return state;\r\n        \r\n        case 'LOGIN_USER':\r\n            myState.check = action.isLogIn;        \r\n            loginUser(action.email,action.password);          \r\n            return myState;\r\n\r\n        case 'UPDATE_PROFILE':\r\n            //quering the user whose profile is to be updated.\r\n            const query = { \"owner_id\": myState.currentuser.id };\r\n            //upsert when true add a new doc if the above query runs false\r\n            const options = {\"upsert\": true};\r\n            //the data to be updated or added\r\n            const new_user = {\r\n                \"owner_id\": myState.currentuser.id,\r\n                \"name\": action.user_name,\r\n                \"email\": action.user_email,\r\n                \"age\": action.user_age,\r\n                \"bio\": action.user_bio\r\n            }\r\n            items.updateOne(query, new_user, options).then(() => alert(\"User Profile Updated\"));\r\n            //items.insertOne(new_user).then(() => alert(\"User Profile Updated\"));\r\n            return myState;\r\n\r\n        case 'LOGOUT_USER':\r\n            //updating the state\r\n            myState.check = false;\r\n            logoutCurrentUser();\r\n            return myState;\r\n            \r\n       \r\n        default:\r\n            //returning previous state\r\n            return state;\r\n    }   \r\n}"]},"metadata":{},"sourceType":"module"}