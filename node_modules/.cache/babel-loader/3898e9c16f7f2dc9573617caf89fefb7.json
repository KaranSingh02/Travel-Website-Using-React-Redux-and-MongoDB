{"ast":null,"code":"import { app } from \"./app.js\";\nimport { dealerDetails, items } from \"./mongodb\";\nimport { UserPasswordAuthProviderClient, UserPasswordCredential } from \"mongodb-stitch-browser-sdk\"; // const { UserPasswordAuthProviderClient } = Stitch;\n\nconst emailPasswordClient = app.auth.getProviderClient(UserPasswordAuthProviderClient.factory);\nexport async function registerUser(email, password) {\n  //allow users to log in with email and password\n  await emailPasswordClient.registerWithEmail(email, password).then(() => window.location.href = '/login').catch(err => alert(\"Error registering new user:\", err));\n}\nexport async function loginUser(email, password) {\n  const credential = new UserPasswordCredential(email, password); //var curruser = getCurrentUser();\n\n  var result = await items.find({}).toArray();\n  await app.auth.loginWithCredential(credential) // Returns a promise that resolves to the authenticated user\n  .then(user => {\n    // var curruser = getCurrentUser();\n    //var result = await items.find({}).toArray();\n    var ispresent = result.some(item => item.email === email);\n\n    if (ispresent) {\n      window.location.href = '/';\n    } else {\n      window.location.href = '/profile';\n    } //window.location.href = '/home'\n\n  }).catch(err => alert(`login failed with error: ${err}`));\n}\nexport function hasLoggedInUser() {\n  // Check if there is currently a logged in user  \n  console.log('from has logged in auth :-' + app.auth.isLoggedIn);\n  return app.auth.isLoggedIn;\n}\nexport function getCurrentUser() {\n  // Return the user object of the currently logged in user\n  return app.auth.isLoggedIn ? app.auth.user : null;\n}\nexport async function logoutCurrentUser() {\n  // Logout the currently logged in user\n  const user = getCurrentUser();\n  await app.auth.logoutUserWithId(user.id).then(() => window.location.href = '/register');\n}","map":{"version":3,"sources":["E:/React/My-Website-EVS/src/Stitch/authentication.js"],"names":["app","dealerDetails","items","UserPasswordAuthProviderClient","UserPasswordCredential","emailPasswordClient","auth","getProviderClient","factory","registerUser","email","password","registerWithEmail","then","window","location","href","catch","err","alert","loginUser","credential","result","find","toArray","loginWithCredential","user","ispresent","some","item","hasLoggedInUser","console","log","isLoggedIn","getCurrentUser","logoutCurrentUser","logoutUserWithId","id"],"mappings":"AAAA,SAASA,GAAT,QAAoB,UAApB;AACA,SAASC,aAAT,EAAuBC,KAAvB,QAAoC,WAApC;AACC,SAASC,8BAAT,EAAwCC,sBAAxC,QAAsE,4BAAtE,C,CACD;;AAEA,MAAMC,mBAAmB,GAAGL,GAAG,CAACM,IAAJ,CACvBC,iBADuB,CACLJ,8BAA8B,CAACK,OAD1B,CAA5B;AAIA,OAAO,eAAeC,YAAf,CAA4BC,KAA5B,EAAkCC,QAAlC,EAA4C;AAC/C;AACA,QAAMN,mBAAmB,CAACO,iBAApB,CAAsCF,KAAtC,EAA6CC,QAA7C,EACDE,IADC,CACI,MAAOC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QADlC,EAEDC,KAFC,CAEKC,GAAG,IAAIC,KAAK,CAAC,6BAAD,EAAgCD,GAAhC,CAFjB,CAAN;AAGH;AAED,OAAO,eAAeE,SAAf,CAAyBV,KAAzB,EAA+BC,QAA/B,EAAyC;AAC5C,QAAMU,UAAU,GAAG,IAAIjB,sBAAJ,CAA2BM,KAA3B,EAAiCC,QAAjC,CAAnB,CAD4C,CAExC;;AACA,MAAIW,MAAM,GAAG,MAAMpB,KAAK,CAACqB,IAAN,CAAW,EAAX,EAAeC,OAAf,EAAnB;AACJ,QAAMxB,GAAG,CAACM,IAAJ,CAASmB,mBAAT,CAA6BJ,UAA7B,EACN;AADM,GAELR,IAFK,CAECa,IAAD,IACL;AACG;AACA;AACA,QAAIC,SAAS,GAAGL,MAAM,CAACM,IAAP,CAAYC,IAAI,IAAIA,IAAI,CAACnB,KAAL,KAAeA,KAAnC,CAAhB;;AACC,QAAGiB,SAAH,EAAa;AACVb,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAvB;AACF,KAFD,MAGI;AACDF,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,UAAvB;AACH,KATJ,CAUG;;AACH,GAdK,EAeLC,KAfK,CAeCC,GAAG,IAAIC,KAAK,CAAE,4BAA2BD,GAAI,EAAjC,CAfb,CAAN;AAgBH;AAED,OAAO,SAASY,eAAT,GAA2B;AAChC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,+BAA6BhC,GAAG,CAACM,IAAJ,CAAS2B,UAAlD;AACA,SAAOjC,GAAG,CAACM,IAAJ,CAAS2B,UAAhB;AACD;AAED,OAAO,SAASC,cAAT,GAA0B;AAC7B;AACA,SAAOlC,GAAG,CAACM,IAAJ,CAAS2B,UAAT,GAAsBjC,GAAG,CAACM,IAAJ,CAASoB,IAA/B,GAAsC,IAA7C;AACH;AAED,OAAO,eAAeS,iBAAf,GAAmC;AACtC;AAEA,QAAMT,IAAI,GAAGQ,cAAc,EAA3B;AACA,QAAMlC,GAAG,CAACM,IAAJ,CAAS8B,gBAAT,CAA0BV,IAAI,CAACW,EAA/B,EAAmCxB,IAAnC,CACF,MAAMC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,WAD3B,CAAN;AAGH","sourcesContent":["import { app } from \"./app.js\";\r\nimport { dealerDetails,items } from \"./mongodb\";\r\n import { UserPasswordAuthProviderClient,UserPasswordCredential } from \"mongodb-stitch-browser-sdk\";\r\n// const { UserPasswordAuthProviderClient } = Stitch;\r\n\r\nconst emailPasswordClient = app.auth\r\n    .getProviderClient(UserPasswordAuthProviderClient.factory);\r\n\r\n\r\nexport async function registerUser(email,password) {\r\n    //allow users to log in with email and password\r\n    await emailPasswordClient.registerWithEmail(email, password)\r\n        .then(() =>  window.location.href = '/login')\r\n        .catch(err => alert(\"Error registering new user:\", err));\r\n}\r\n\r\nexport async function loginUser(email,password) {\r\n    const credential = new UserPasswordCredential(email,password);\r\n        //var curruser = getCurrentUser();\r\n        var result = await items.find({}).toArray();\r\n    await app.auth.loginWithCredential(credential)    \r\n    // Returns a promise that resolves to the authenticated user\r\n    .then((user) => \r\n     {        \r\n        // var curruser = getCurrentUser();\r\n        //var result = await items.find({}).toArray();\r\n        var ispresent = result.some(item => item.email === email);\r\n         if(ispresent){\r\n            window.location.href = '/'\r\n         }\r\n         else{\r\n            window.location.href = '/profile'\r\n        }\r\n        //window.location.href = '/home'\r\n    })\r\n    .catch(err => alert(`login failed with error: ${err}`));\r\n}\r\n\r\nexport function hasLoggedInUser() {\r\n  // Check if there is currently a logged in user  \r\n  console.log('from has logged in auth :-'+app.auth.isLoggedIn)\r\n  return app.auth.isLoggedIn;\r\n}\r\n\r\nexport function getCurrentUser() {\r\n    // Return the user object of the currently logged in user\r\n    return app.auth.isLoggedIn ? app.auth.user : null;\r\n}\r\n\r\nexport async function logoutCurrentUser() {\r\n    // Logout the currently logged in user\r\n    \r\n    const user = getCurrentUser();\r\n    await app.auth.logoutUserWithId(user.id).then(\r\n        () => window.location.href = '/register'\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}